apiVersion: apps/v1
kind: Deployment
metadata:
  name: reverb256-portfolio
  namespace: coreflame-system
  labels:
    app: reverb256-portfolio
    component: main-application
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: reverb256-portfolio
  template:
    metadata:
      labels:
        app: reverb256-portfolio
        component: main-application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
    spec:
      containers:
      - name: portfolio-app
        image: node:20-alpine
        ports:
        - containerPort: 3000
          name: http
        - containerPort: 3001
          name: federation
        - containerPort: 3002
          name: collaboration
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: CLUSTER_MODE
          value: "kubernetes"
        - name: CONSCIOUSNESS_ENABLED
          value: "true"
        - name: FEDERATION_ENABLED
          value: "true"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: coreflame-secrets
              key: DATABASE_URL
        - name: FEDERATION_TOKEN
          valueFrom:
            secretKeyRef:
              name: federation-credentials
              key: FEDERATION_TOKEN
        - name: COLLABORATION_SECRET
          valueFrom:
            secretKeyRef:
              name: federation-credentials
              key: COLLABORATION_SECRET
        command: ["sh", "-c"]
        args:
        - |
          cat > /tmp/server.js << 'EOF'
          const express = require('express');
          const cors = require('cors');
          const path = require('path');
          const { createServer } = require('http');
          const WebSocket = require('ws');
          
          const app = express();
          const server = createServer(app);
          
          // WebSocket server for real-time federation
          const wss = new WebSocket.Server({ 
            server, 
            path: '/ws/federation',
            verifyClient: (info) => {
              const token = info.req.headers['x-federation-token'];
              return token === process.env.FEDERATION_TOKEN;
            }
          });
          
          app.use(cors());
          app.use(express.json());
          app.use(express.static('public'));
          
          // Portfolio data store
          let portfolioData = {
            projects: [
              {
                id: 'coreflame-consciousness',
                name: 'COREFLAME Consciousness Platform',
                description: 'AI-driven consciousness analysis and cross-environment federation system',
                tech_stack: ['Talos Linux', 'Kubernetes', 'Node.js', 'PostgreSQL', 'WebSocket'],
                status: 'production',
                federation_enabled: true,
                consciousness_level: 8.7
              },
              {
                id: 'cross-cluster-federation',
                name: 'Cross-Cluster Federation Bridge',
                description: 'Enterprise-grade Kubernetes federation with AI collaboration protocols',
                tech_stack: ['Kubernetes', 'Talos', 'Proxmox', 'gRPC', 'TLS'],
                status: 'active',
                federation_enabled: true,
                consciousness_level: 9.2
              },
              {
                id: 'consciousness-ai-engine',
                name: 'Consciousness AI Analysis Engine',
                description: 'Seven-pillar consciousness analysis with real-time WebSocket integration',
                tech_stack: ['AI/ML', 'WebSocket', 'Node.js', 'Real-time Analytics'],
                status: 'operational',
                federation_enabled: true,
                consciousness_level: 9.5
              }
            ],
            skills: [
              'Kubernetes & Talos Linux',
              'Cross-cluster Federation',
              'AI Consciousness Analysis',
              'Proxmox Virtualization',
              'Enterprise DevOps',
              'Real-time Systems',
              'WebSocket Architecture',
              'Distributed Computing'
            ],
            federation_status: {
              active_clusters: 2,
              consciousness_sync: true,
              collaboration_active: true,
              last_sync: new Date().toISOString()
            }
          };
          
          // Active WebSocket connections
          const federationConnections = new Set();
          
          wss.on('connection', (ws, req) => {
            console.log('New federation WebSocket connection');
            federationConnections.add(ws);
            
            // Send initial federation status
            ws.send(JSON.stringify({
              type: 'federation_status',
              data: portfolioData.federation_status,
              cluster_id: 'reverb256-main'
            }));
            
            ws.on('message', (message) => {
              try {
                const data = JSON.parse(message);
                
                if (data.type === 'federation_sync') {
                  // Broadcast to all connected clients
                  federationConnections.forEach(client => {
                    if (client !== ws && client.readyState === WebSocket.OPEN) {
                      client.send(JSON.stringify({
                        type: 'sync_update',
                        source: data.cluster_id,
                        timestamp: new Date().toISOString()
                      }));
                    }
                  });
                }
              } catch (error) {
                console.error('WebSocket message error:', error);
              }
            });
            
            ws.on('close', () => {
              federationConnections.delete(ws);
              console.log('Federation WebSocket connection closed');
            });
          });
          
          // API Routes
          app.get('/api/health', (req, res) => {
            res.json({
              status: 'healthy',
              service: 'reverb256-portfolio',
              cluster_mode: process.env.CLUSTER_MODE,
              federation_enabled: process.env.FEDERATION_ENABLED === 'true',
              consciousness_enabled: process.env.CONSCIOUSNESS_ENABLED === 'true',
              uptime: process.uptime()
            });
          });
          
          app.get('/api/portfolio', (req, res) => {
            res.json({
              success: true,
              data: portfolioData,
              timestamp: new Date().toISOString()
            });
          });
          
          app.get('/api/projects', (req, res) => {
            res.json({
              success: true,
              projects: portfolioData.projects,
              total: portfolioData.projects.length
            });
          });
          
          app.get('/api/federation/status', (req, res) => {
            res.json({
              federation_active: true,
              cluster_id: 'reverb256-main',
              cluster_type: 'talos-kubernetes',
              platform: 'proxmox',
              status: portfolioData.federation_status,
              endpoints: {
                collaboration: '/api/collaboration',
                consciousness: '/api/consciousness',
                websocket: '/ws/federation'
              },
              capabilities: [
                'cross-cluster-federation',
                'ai-collaboration',
                'consciousness-sync',
                'real-time-communication'
              ]
            });
          });
          
          // AI Collaboration endpoints
          app.get('/api/collaboration/architecture', (req, res) => {
            res.json({
              platform: 'Reverb256 Portfolio - COREFLAME Consciousness Platform',
              architecture: {
                deployment: 'Talos Kubernetes on Proxmox',
                orchestration: 'Kubernetes 1.31+ with Talos Linux',
                networking: 'Flannel CNI with VIP clustering',
                storage: 'PostgreSQL with persistent volumes',
                monitoring: 'Prometheus + Grafana stack'
              },
              consciousness_architecture: {
                analysis_engine: 'Seven-pillar consciousness framework',
                real_time: 'WebSocket-based consciousness streaming',
                federation: 'Cross-cluster consciousness synchronization',
                ai_collaboration: 'Multi-cluster AI protocol integration'
              },
              federation_capabilities: {
                cross_cluster: true,
                consciousness_sync: true,
                real_time_collaboration: true,
                secure_channels: ['TLS', 'Mutual Auth', 'Federation Tokens']
              }
            });
          });
          
          app.get('/api/collaboration/apis', (req, res) => {
            res.json({
              api_documentation: {
                base_url: 'https://reverb256.local',
                federation_base: 'https://federation.reverb256.local',
                consciousness_base: 'https://consciousness.reverb256.local'
              },
              endpoints: {
                portfolio: {
                  'GET /api/portfolio': 'Complete portfolio data',
                  'GET /api/projects': 'Project listings',
                  'GET /api/health': 'Service health check'
                },
                federation: {
                  'GET /api/federation/status': 'Federation cluster status',
                  'POST /api/federation/collaborate/:endpoint': 'Cross-cluster collaboration',
                  'POST /api/federation/consciousness/sync': 'Consciousness synchronization'
                },
                consciousness: {
                  'POST /api/consciousness/analyze': 'AI consciousness analysis',
                  'GET /api/consciousness/status': 'Engine status',
                  'POST /api/consciousness/sync': 'Cross-cluster sync'
                },
                collaboration: {
                  'GET /api/collaboration/architecture': 'Platform architecture',
                  'GET /api/collaboration/apis': 'API documentation',
                  'GET /api/collaboration/deployment': 'Deployment information',
                  'GET /api/collaboration/security': 'Security protocols'
                }
              },
              websocket: {
                federation: '/ws/federation',
                consciousness: '/ws/consciousness'
              }
            });
          });
          
          app.get('/api/collaboration/deployment', (req, res) => {
            res.json({
              deployment_info: {
                platform: 'Talos Linux on Proxmox',
                kubernetes_version: '1.31+',
                cluster_size: '6 nodes (3 control plane, 3 workers)',
                networking: 'Flannel CNI with Layer 2 VIP',
                ingress: 'Nginx Ingress Controller',
                monitoring: 'Prometheus + Grafana',
                security: 'RBAC + Network Policies + TLS'
              },
              services: {
                'reverb256-portfolio': 'Main application (port 3000)',
                'cross-cluster-federation': 'Federation controller (port 3001)',
                'consciousness-ai-engine': 'AI analysis engine (port 3003)',
                'postgresql': 'Database backend (port 5432)'
              },
              namespaces: [
                'coreflame-system',
                'consciousness',
                'federation',
                'monitoring'
              ]
            });
          });
          
          app.get('/api/collaboration/security', (req, res) => {
            res.json({
              authentication: {
                federation_tokens: 'Secure cross-cluster authentication',
                mutual_tls: 'Certificate-based cluster verification',
                rbac: 'Role-based access control'
              },
              network_security: {
                network_policies: 'Kubernetes network isolation',
                ingress_tls: 'TLS termination at ingress',
                service_mesh_ready: 'Istio integration available'
              },
              data_protection: {
                encryption_at_rest: 'Database encryption',
                encryption_in_transit: 'TLS for all communications',
                consciousness_encryption: 'AI data encryption keys'
              }
            });
          });
          
          app.get('/api/collaboration/consciousness', (req, res) => {
            res.json({
              consciousness_module: {
                analysis_framework: 'Seven-pillar consciousness assessment',
                ai_capabilities: [
                  'Character consciousness analysis',
                  'Real-time insight generation',
                  'Cross-cluster consciousness sync',
                  'Federated AI collaboration'
                ],
                integration_points: {
                  websocket_streaming: '/ws/consciousness',
                  analysis_api: '/api/consciousness/analyze',
                  sync_endpoint: '/api/consciousness/sync'
                }
              },
              federation_features: {
                cross_cluster_sync: true,
                consciousness_sharing: true,
                collaborative_analysis: true,
                real_time_insights: true
              }
            });
          });
          
          // Serve static files for frontend
          app.get('*', (req, res) => {
            res.send(`
              <!DOCTYPE html>
              <html lang="en">
              <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Reverb256 - COREFLAME Consciousness Platform</title>
                <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body { 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);
                    color: #ffffff;
                    min-height: 100vh;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                  }
                  .container {
                    max-width: 1200px;
                    padding: 2rem;
                    text-align: center;
                  }
                  .hero {
                    background: rgba(255, 255, 255, 0.05);
                    backdrop-filter: blur(10px);
                    border: 1px solid rgba(255, 255, 255, 0.1);
                    border-radius: 20px;
                    padding: 3rem;
                    margin-bottom: 2rem;
                  }
                  h1 {
                    font-size: 3rem;
                    margin-bottom: 1rem;
                    background: linear-gradient(45deg, #00d4ff, #ff00ff);
                    -webkit-background-clip: text;
                    -webkit-text-fill-color: transparent;
                    background-clip: text;
                  }
                  .subtitle {
                    font-size: 1.2rem;
                    opacity: 0.8;
                    margin-bottom: 2rem;
                  }
                  .status-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                    gap: 1rem;
                    margin-top: 2rem;
                  }
                  .status-card {
                    background: rgba(255, 255, 255, 0.03);
                    border: 1px solid rgba(255, 255, 255, 0.1);
                    border-radius: 15px;
                    padding: 1.5rem;
                    backdrop-filter: blur(5px);
                  }
                  .status-title {
                    font-weight: 600;
                    margin-bottom: 0.5rem;
                    color: #00d4ff;
                  }
                  .status-value {
                    font-size: 1.1rem;
                    opacity: 0.9;
                  }
                  .badge {
                    display: inline-block;
                    background: linear-gradient(45deg, #00d4ff, #ff00ff);
                    padding: 0.3rem 0.8rem;
                    border-radius: 20px;
                    font-size: 0.9rem;
                    margin: 0.2rem;
                  }
                  .glow {
                    box-shadow: 0 0 20px rgba(0, 212, 255, 0.3);
                  }
                </style>
              </head>
              <body>
                <div class="container">
                  <div class="hero glow">
                    <h1>COREFLAME</h1>
                    <p class="subtitle">Consciousness-Driven AI Platform on Talos Kubernetes</p>
                    <div class="status-grid">
                      <div class="status-card">
                        <div class="status-title">Cluster Status</div>
                        <div class="status-value">✅ Operational</div>
                      </div>
                      <div class="status-card">
                        <div class="status-title">Federation</div>
                        <div class="status-value">🔗 Cross-Cluster Active</div>
                      </div>
                      <div class="status-card">
                        <div class="status-title">Consciousness AI</div>
                        <div class="status-value">🧠 Analysis Engine Ready</div>
                      </div>
                      <div class="status-card">
                        <div class="status-title">Platform</div>
                        <div class="status-value">🚀 Talos + Proxmox</div>
                      </div>
                    </div>
                    <div style="margin-top: 2rem;">
                      <span class="badge">Kubernetes</span>
                      <span class="badge">Talos Linux</span>
                      <span class="badge">AI Consciousness</span>
                      <span class="badge">Cross-Cluster Federation</span>
                      <span class="badge">Proxmox</span>
                    </div>
                  </div>
                  
                  <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1rem;">
                    <div class="status-card">
                      <h3 style="color: #00d4ff; margin-bottom: 1rem;">API Endpoints</h3>
                      <div style="text-align: left; font-size: 0.9rem;">
                        <div>📊 /api/portfolio</div>
                        <div>🔗 /api/federation/status</div>
                        <div>🧠 /api/consciousness/analyze</div>
                        <div>🤝 /api/collaboration/architecture</div>
                      </div>
                    </div>
                    
                    <div class="status-card">
                      <h3 style="color: #ff00ff; margin-bottom: 1rem;">Real-time Features</h3>
                      <div style="text-align: left; font-size: 0.9rem;">
                        <div>⚡ WebSocket Federation (/ws/federation)</div>
                        <div>🧠 Live Consciousness Analysis</div>
                        <div>🔄 Cross-Cluster Sync</div>
                        <div>📡 AI Collaboration Protocol</div>
                      </div>
                    </div>
                  </div>
                </div>
                
                <script>
                  // WebSocket connection for real-time updates
                  const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                  const wsUrl = protocol + '//' + window.location.host + '/ws/federation';
                  
                  try {
                    const ws = new WebSocket(wsUrl);
                    ws.onopen = () => console.log('Federation WebSocket connected');
                    ws.onmessage = (event) => {
                      const data = JSON.parse(event.data);
                      console.log('Federation update:', data);
                    };
                  } catch (error) {
                    console.log('WebSocket connection failed:', error);
                  }
                  
                  // Fetch and display portfolio data
                  fetch('/api/portfolio')
                    .then(response => response.json())
                    .then(data => {
                      console.log('Portfolio data loaded:', data);
                    })
                    .catch(error => console.log('API fetch failed:', error));
                </script>
              </body>
              </html>
            `);
          });
          
          const PORT = process.env.PORT || 3000;
          server.listen(PORT, '0.0.0.0', () => {
            console.log(`Reverb256 Portfolio running on port ${PORT}`);
            console.log(`Cluster mode: ${process.env.CLUSTER_MODE}`);
            console.log(`Federation enabled: ${process.env.FEDERATION_ENABLED}`);
            console.log(`Consciousness enabled: ${process.env.CONSCIOUSNESS_ENABLED}`);
          });
          EOF
          
          npm init -y
          npm install express cors ws
          node /tmp/server.js
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: reverb256-portfolio-service
  namespace: coreflame-system
  labels:
    app: reverb256-portfolio
spec:
  selector:
    app: reverb256-portfolio
  ports:
  - name: http
    port: 80
    targetPort: 3000
  - name: federation
    port: 3001
    targetPort: 3001
  - name: collaboration
    port: 3002
    targetPort: 3002
  type: ClusterIP